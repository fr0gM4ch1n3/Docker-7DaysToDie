name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

env:
  IMAGE_NAME: 7dtd-server

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  # test:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Run tests
  #       run: |
  #         if [ -f docker-compose.test.yml ]; then
  #           docker-compose --file docker-compose.test.yml build
  #           docker-compose --file docker-compose.test.yml run sut
  #         else
  #           docker build . --file Dockerfile
  #         fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build:
    # Ensure test job passes before pushing image.
    # needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
#   deploy:
#     needs: build

#     runs-on: ubuntu-latest

#     steps:
#       - name: deploy
#         uses: garygrossgarten/github-action-ssh@release
#         with:
#           command: sudo /usr/bin/deploy_nwo_fivem
#           host: ${{ secrets.DEPLOY_HOST }}
#           port: ${{ secrets.DEPLOY_PORT }}
#           username: ${{ secrets.DEPLOY_USER }}
#           privateKey: ${{ secrets.DEPLOY_PRIVATE_KEY}}
          
  notifier:
    needs: build
    
    runs-on: ubuntu-latest
    
    steps:
    
      - uses: binotaliu/action-discord-notifier@v1
        with:
          message-title: The project **7dtd-server** has been built.
          webhook: https://discord.com/api/webhooks/809587146775199744/xCk76lYv4CyGFBDwPWnVop1y6e9mVeJQi2hasXcpdhrPPRXLcU41Ig-lIJ7GmR3cE4IL
